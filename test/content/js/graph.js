/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 94.0, "minX": 0.0, "maxY": 4567.0, "series": [{"data": [[0.0, 94.0], [0.1, 230.0], [0.2, 334.0], [0.3, 334.0], [0.4, 366.0], [0.5, 381.0], [0.6, 390.0], [0.7, 462.0], [0.8, 508.0], [0.9, 510.0], [1.0, 515.0], [1.1, 535.0], [1.2, 553.0], [1.3, 561.0], [1.4, 561.0], [1.5, 565.0], [1.6, 594.0], [1.7, 599.0], [1.8, 600.0], [1.9, 631.0], [2.0, 661.0], [2.1, 669.0], [2.2, 670.0], [2.3, 670.0], [2.4, 692.0], [2.5, 707.0], [2.6, 714.0], [2.7, 719.0], [2.8, 743.0], [2.9, 756.0], [3.0, 765.0], [3.1, 800.0], [3.2, 822.0], [3.3, 864.0], [3.4, 889.0], [3.5, 895.0], [3.6, 896.0], [3.7, 897.0], [3.8, 909.0], [3.9, 912.0], [4.0, 912.0], [4.1, 914.0], [4.2, 915.0], [4.3, 921.0], [4.4, 929.0], [4.5, 933.0], [4.6, 933.0], [4.7, 934.0], [4.8, 936.0], [4.9, 937.0], [5.0, 943.0], [5.1, 956.0], [5.2, 985.0], [5.3, 990.0], [5.4, 995.0], [5.5, 997.0], [5.6, 1001.0], [5.7, 1035.0], [5.8, 1047.0], [5.9, 1061.0], [6.0, 1063.0], [6.1, 1097.0], [6.2, 1101.0], [6.3, 1103.0], [6.4, 1106.0], [6.5, 1116.0], [6.6, 1117.0], [6.7, 1119.0], [6.8, 1125.0], [6.9, 1131.0], [7.0, 1139.0], [7.1, 1150.0], [7.2, 1154.0], [7.3, 1170.0], [7.4, 1171.0], [7.5, 1179.0], [7.6, 1199.0], [7.7, 1226.0], [7.8, 1250.0], [7.9, 1261.0], [8.0, 1270.0], [8.1, 1300.0], [8.2, 1314.0], [8.3, 1319.0], [8.4, 1325.0], [8.5, 1333.0], [8.6, 1341.0], [8.7, 1341.0], [8.8, 1348.0], [8.9, 1350.0], [9.0, 1351.0], [9.1, 1352.0], [9.2, 1352.0], [9.3, 1357.0], [9.4, 1372.0], [9.5, 1375.0], [9.6, 1375.0], [9.7, 1379.0], [9.8, 1386.0], [9.9, 1393.0], [10.0, 1422.0], [10.1, 1430.0], [10.2, 1430.0], [10.3, 1430.0], [10.4, 1441.0], [10.5, 1455.0], [10.6, 1458.0], [10.7, 1462.0], [10.8, 1467.0], [10.9, 1468.0], [11.0, 1474.0], [11.1, 1476.0], [11.2, 1485.0], [11.3, 1503.0], [11.4, 1504.0], [11.5, 1504.0], [11.6, 1512.0], [11.7, 1513.0], [11.8, 1518.0], [11.9, 1532.0], [12.0, 1533.0], [12.1, 1539.0], [12.2, 1543.0], [12.3, 1544.0], [12.4, 1544.0], [12.5, 1550.0], [12.6, 1551.0], [12.7, 1551.0], [12.8, 1552.0], [12.9, 1556.0], [13.0, 1556.0], [13.1, 1557.0], [13.2, 1561.0], [13.3, 1562.0], [13.4, 1562.0], [13.5, 1562.0], [13.6, 1562.0], [13.7, 1563.0], [13.8, 1564.0], [13.9, 1566.0], [14.0, 1566.0], [14.1, 1567.0], [14.2, 1568.0], [14.3, 1568.0], [14.4, 1569.0], [14.5, 1569.0], [14.6, 1569.0], [14.7, 1570.0], [14.8, 1571.0], [14.9, 1571.0], [15.0, 1573.0], [15.1, 1574.0], [15.2, 1575.0], [15.3, 1577.0], [15.4, 1577.0], [15.5, 1577.0], [15.6, 1578.0], [15.7, 1578.0], [15.8, 1583.0], [15.9, 1585.0], [16.0, 1585.0], [16.1, 1586.0], [16.2, 1586.0], [16.3, 1587.0], [16.4, 1590.0], [16.5, 1591.0], [16.6, 1592.0], [16.7, 1592.0], [16.8, 1592.0], [16.9, 1593.0], [17.0, 1594.0], [17.1, 1595.0], [17.2, 1595.0], [17.3, 1595.0], [17.4, 1596.0], [17.5, 1597.0], [17.6, 1598.0], [17.7, 1599.0], [17.8, 1601.0], [17.9, 1601.0], [18.0, 1602.0], [18.1, 1606.0], [18.2, 1607.0], [18.3, 1608.0], [18.4, 1610.0], [18.5, 1610.0], [18.6, 1616.0], [18.7, 1621.0], [18.8, 1622.0], [18.9, 1622.0], [19.0, 1624.0], [19.1, 1625.0], [19.2, 1626.0], [19.3, 1627.0], [19.4, 1627.0], [19.5, 1627.0], [19.6, 1628.0], [19.7, 1629.0], [19.8, 1632.0], [19.9, 1634.0], [20.0, 1638.0], [20.1, 1640.0], [20.2, 1640.0], [20.3, 1645.0], [20.4, 1645.0], [20.5, 1650.0], [20.6, 1655.0], [20.7, 1656.0], [20.8, 1660.0], [20.9, 1667.0], [21.0, 1671.0], [21.1, 1675.0], [21.2, 1687.0], [21.3, 1688.0], [21.4, 1688.0], [21.5, 1693.0], [21.6, 1698.0], [21.7, 1708.0], [21.8, 1721.0], [21.9, 1740.0], [22.0, 1740.0], [22.1, 1742.0], [22.2, 1744.0], [22.3, 1784.0], [22.4, 1788.0], [22.5, 1790.0], [22.6, 1795.0], [22.7, 1797.0], [22.8, 1802.0], [22.9, 1803.0], [23.0, 1804.0], [23.1, 1809.0], [23.2, 1809.0], [23.3, 1814.0], [23.4, 1815.0], [23.5, 1817.0], [23.6, 1821.0], [23.7, 1823.0], [23.8, 1831.0], [23.9, 1833.0], [24.0, 1833.0], [24.1, 1834.0], [24.2, 1838.0], [24.3, 1839.0], [24.4, 1843.0], [24.5, 1844.0], [24.6, 1847.0], [24.7, 1848.0], [24.8, 1854.0], [24.9, 1855.0], [25.0, 1856.0], [25.1, 1860.0], [25.2, 1860.0], [25.3, 1860.0], [25.4, 1876.0], [25.5, 1879.0], [25.6, 1880.0], [25.7, 1881.0], [25.8, 1886.0], [25.9, 1903.0], [26.0, 1908.0], [26.1, 1916.0], [26.2, 1918.0], [26.3, 1919.0], [26.4, 1932.0], [26.5, 1933.0], [26.6, 1939.0], [26.7, 1946.0], [26.8, 1950.0], [26.9, 1952.0], [27.0, 1956.0], [27.1, 1957.0], [27.2, 1958.0], [27.3, 1962.0], [27.4, 1966.0], [27.5, 1967.0], [27.6, 1968.0], [27.7, 1976.0], [27.8, 1976.0], [27.9, 1977.0], [28.0, 1988.0], [28.1, 1988.0], [28.2, 1990.0], [28.3, 1992.0], [28.4, 1997.0], [28.5, 2002.0], [28.6, 2004.0], [28.7, 2007.0], [28.8, 2013.0], [28.9, 2013.0], [29.0, 2017.0], [29.1, 2018.0], [29.2, 2018.0], [29.3, 2019.0], [29.4, 2019.0], [29.5, 2030.0], [29.6, 2031.0], [29.7, 2033.0], [29.8, 2037.0], [29.9, 2047.0], [30.0, 2048.0], [30.1, 2049.0], [30.2, 2053.0], [30.3, 2053.0], [30.4, 2054.0], [30.5, 2056.0], [30.6, 2058.0], [30.7, 2058.0], [30.8, 2059.0], [30.9, 2060.0], [31.0, 2060.0], [31.1, 2060.0], [31.2, 2065.0], [31.3, 2065.0], [31.4, 2065.0], [31.5, 2065.0], [31.6, 2067.0], [31.7, 2067.0], [31.8, 2068.0], [31.9, 2069.0], [32.0, 2070.0], [32.1, 2074.0], [32.2, 2075.0], [32.3, 2075.0], [32.4, 2078.0], [32.5, 2079.0], [32.6, 2079.0], [32.7, 2079.0], [32.8, 2082.0], [32.9, 2082.0], [33.0, 2082.0], [33.1, 2085.0], [33.2, 2088.0], [33.3, 2088.0], [33.4, 2090.0], [33.5, 2093.0], [33.6, 2094.0], [33.7, 2095.0], [33.8, 2097.0], [33.9, 2098.0], [34.0, 2098.0], [34.1, 2100.0], [34.2, 2101.0], [34.3, 2103.0], [34.4, 2104.0], [34.5, 2106.0], [34.6, 2107.0], [34.7, 2108.0], [34.8, 2108.0], [34.9, 2109.0], [35.0, 2112.0], [35.1, 2113.0], [35.2, 2114.0], [35.3, 2114.0], [35.4, 2116.0], [35.5, 2122.0], [35.6, 2122.0], [35.7, 2125.0], [35.8, 2127.0], [35.9, 2130.0], [36.0, 2132.0], [36.1, 2134.0], [36.2, 2134.0], [36.3, 2137.0], [36.4, 2137.0], [36.5, 2137.0], [36.6, 2138.0], [36.7, 2138.0], [36.8, 2139.0], [36.9, 2139.0], [37.0, 2140.0], [37.1, 2140.0], [37.2, 2140.0], [37.3, 2141.0], [37.4, 2143.0], [37.5, 2144.0], [37.6, 2146.0], [37.7, 2147.0], [37.8, 2148.0], [37.9, 2149.0], [38.0, 2150.0], [38.1, 2150.0], [38.2, 2152.0], [38.3, 2154.0], [38.4, 2155.0], [38.5, 2157.0], [38.6, 2158.0], [38.7, 2158.0], [38.8, 2159.0], [38.9, 2162.0], [39.0, 2163.0], [39.1, 2165.0], [39.2, 2167.0], [39.3, 2167.0], [39.4, 2168.0], [39.5, 2169.0], [39.6, 2169.0], [39.7, 2169.0], [39.8, 2170.0], [39.9, 2171.0], [40.0, 2172.0], [40.1, 2172.0], [40.2, 2174.0], [40.3, 2175.0], [40.4, 2175.0], [40.5, 2176.0], [40.6, 2176.0], [40.7, 2178.0], [40.8, 2178.0], [40.9, 2178.0], [41.0, 2179.0], [41.1, 2181.0], [41.2, 2182.0], [41.3, 2183.0], [41.4, 2183.0], [41.5, 2184.0], [41.6, 2185.0], [41.7, 2185.0], [41.8, 2185.0], [41.9, 2191.0], [42.0, 2193.0], [42.1, 2195.0], [42.2, 2195.0], [42.3, 2197.0], [42.4, 2199.0], [42.5, 2200.0], [42.6, 2201.0], [42.7, 2201.0], [42.8, 2208.0], [42.9, 2211.0], [43.0, 2211.0], [43.1, 2213.0], [43.2, 2213.0], [43.3, 2214.0], [43.4, 2216.0], [43.5, 2219.0], [43.6, 2219.0], [43.7, 2224.0], [43.8, 2233.0], [43.9, 2234.0], [44.0, 2234.0], [44.1, 2235.0], [44.2, 2235.0], [44.3, 2237.0], [44.4, 2237.0], [44.5, 2238.0], [44.6, 2238.0], [44.7, 2241.0], [44.8, 2244.0], [44.9, 2246.0], [45.0, 2249.0], [45.1, 2250.0], [45.2, 2251.0], [45.3, 2253.0], [45.4, 2255.0], [45.5, 2255.0], [45.6, 2257.0], [45.7, 2259.0], [45.8, 2262.0], [45.9, 2263.0], [46.0, 2263.0], [46.1, 2263.0], [46.2, 2264.0], [46.3, 2265.0], [46.4, 2266.0], [46.5, 2266.0], [46.6, 2273.0], [46.7, 2277.0], [46.8, 2277.0], [46.9, 2278.0], [47.0, 2279.0], [47.1, 2280.0], [47.2, 2281.0], [47.3, 2281.0], [47.4, 2281.0], [47.5, 2282.0], [47.6, 2282.0], [47.7, 2283.0], [47.8, 2284.0], [47.9, 2284.0], [48.0, 2284.0], [48.1, 2285.0], [48.2, 2286.0], [48.3, 2288.0], [48.4, 2288.0], [48.5, 2289.0], [48.6, 2289.0], [48.7, 2290.0], [48.8, 2290.0], [48.9, 2290.0], [49.0, 2293.0], [49.1, 2294.0], [49.2, 2294.0], [49.3, 2295.0], [49.4, 2298.0], [49.5, 2298.0], [49.6, 2300.0], [49.7, 2300.0], [49.8, 2301.0], [49.9, 2307.0], [50.0, 2308.0], [50.1, 2308.0], [50.2, 2308.0], [50.3, 2309.0], [50.4, 2309.0], [50.5, 2310.0], [50.6, 2311.0], [50.7, 2311.0], [50.8, 2312.0], [50.9, 2315.0], [51.0, 2315.0], [51.1, 2317.0], [51.2, 2317.0], [51.3, 2318.0], [51.4, 2322.0], [51.5, 2323.0], [51.6, 2326.0], [51.7, 2327.0], [51.8, 2329.0], [51.9, 2330.0], [52.0, 2330.0], [52.1, 2334.0], [52.2, 2336.0], [52.3, 2336.0], [52.4, 2337.0], [52.5, 2340.0], [52.6, 2340.0], [52.7, 2340.0], [52.8, 2341.0], [52.9, 2341.0], [53.0, 2342.0], [53.1, 2343.0], [53.2, 2343.0], [53.3, 2345.0], [53.4, 2347.0], [53.5, 2350.0], [53.6, 2355.0], [53.7, 2357.0], [53.8, 2360.0], [53.9, 2362.0], [54.0, 2362.0], [54.1, 2366.0], [54.2, 2376.0], [54.3, 2380.0], [54.4, 2383.0], [54.5, 2391.0], [54.6, 2396.0], [54.7, 2397.0], [54.8, 2399.0], [54.9, 2400.0], [55.0, 2403.0], [55.1, 2406.0], [55.2, 2407.0], [55.3, 2410.0], [55.4, 2415.0], [55.5, 2417.0], [55.6, 2423.0], [55.7, 2424.0], [55.8, 2424.0], [55.9, 2425.0], [56.0, 2427.0], [56.1, 2428.0], [56.2, 2435.0], [56.3, 2436.0], [56.4, 2437.0], [56.5, 2441.0], [56.6, 2443.0], [56.7, 2450.0], [56.8, 2454.0], [56.9, 2456.0], [57.0, 2457.0], [57.1, 2461.0], [57.2, 2463.0], [57.3, 2463.0], [57.4, 2468.0], [57.5, 2468.0], [57.6, 2469.0], [57.7, 2470.0], [57.8, 2475.0], [57.9, 2481.0], [58.0, 2481.0], [58.1, 2497.0], [58.2, 2503.0], [58.3, 2504.0], [58.4, 2506.0], [58.5, 2511.0], [58.6, 2515.0], [58.7, 2519.0], [58.8, 2519.0], [58.9, 2524.0], [59.0, 2528.0], [59.1, 2528.0], [59.2, 2530.0], [59.3, 2534.0], [59.4, 2536.0], [59.5, 2540.0], [59.6, 2540.0], [59.7, 2541.0], [59.8, 2543.0], [59.9, 2548.0], [60.0, 2550.0], [60.1, 2554.0], [60.2, 2555.0], [60.3, 2564.0], [60.4, 2567.0], [60.5, 2570.0], [60.6, 2570.0], [60.7, 2573.0], [60.8, 2573.0], [60.9, 2573.0], [61.0, 2578.0], [61.1, 2579.0], [61.2, 2582.0], [61.3, 2583.0], [61.4, 2584.0], [61.5, 2584.0], [61.6, 2585.0], [61.7, 2587.0], [61.8, 2589.0], [61.9, 2591.0], [62.0, 2593.0], [62.1, 2594.0], [62.2, 2595.0], [62.3, 2595.0], [62.4, 2599.0], [62.5, 2600.0], [62.6, 2604.0], [62.7, 2611.0], [62.8, 2617.0], [62.9, 2618.0], [63.0, 2618.0], [63.1, 2620.0], [63.2, 2621.0], [63.3, 2625.0], [63.4, 2629.0], [63.5, 2630.0], [63.6, 2631.0], [63.7, 2631.0], [63.8, 2633.0], [63.9, 2635.0], [64.0, 2641.0], [64.1, 2642.0], [64.2, 2642.0], [64.3, 2643.0], [64.4, 2645.0], [64.5, 2645.0], [64.6, 2646.0], [64.7, 2650.0], [64.8, 2654.0], [64.9, 2657.0], [65.0, 2657.0], [65.1, 2658.0], [65.2, 2660.0], [65.3, 2660.0], [65.4, 2661.0], [65.5, 2662.0], [65.6, 2665.0], [65.7, 2666.0], [65.8, 2668.0], [65.9, 2669.0], [66.0, 2670.0], [66.1, 2671.0], [66.2, 2671.0], [66.3, 2672.0], [66.4, 2676.0], [66.5, 2678.0], [66.6, 2679.0], [66.7, 2680.0], [66.8, 2687.0], [66.9, 2687.0], [67.0, 2687.0], [67.1, 2689.0], [67.2, 2694.0], [67.3, 2695.0], [67.4, 2696.0], [67.5, 2699.0], [67.6, 2700.0], [67.7, 2701.0], [67.8, 2701.0], [67.9, 2704.0], [68.0, 2704.0], [68.1, 2705.0], [68.2, 2706.0], [68.3, 2707.0], [68.4, 2708.0], [68.5, 2709.0], [68.6, 2710.0], [68.7, 2711.0], [68.8, 2711.0], [68.9, 2713.0], [69.0, 2714.0], [69.1, 2715.0], [69.2, 2715.0], [69.3, 2717.0], [69.4, 2719.0], [69.5, 2719.0], [69.6, 2719.0], [69.7, 2720.0], [69.8, 2720.0], [69.9, 2722.0], [70.0, 2722.0], [70.1, 2722.0], [70.2, 2724.0], [70.3, 2727.0], [70.4, 2728.0], [70.5, 2730.0], [70.6, 2730.0], [70.7, 2730.0], [70.8, 2732.0], [70.9, 2732.0], [71.0, 2732.0], [71.1, 2733.0], [71.2, 2734.0], [71.3, 2735.0], [71.4, 2735.0], [71.5, 2735.0], [71.6, 2736.0], [71.7, 2737.0], [71.8, 2737.0], [71.9, 2737.0], [72.0, 2738.0], [72.1, 2739.0], [72.2, 2739.0], [72.3, 2741.0], [72.4, 2743.0], [72.5, 2744.0], [72.6, 2744.0], [72.7, 2747.0], [72.8, 2748.0], [72.9, 2751.0], [73.0, 2753.0], [73.1, 2754.0], [73.2, 2754.0], [73.3, 2758.0], [73.4, 2758.0], [73.5, 2759.0], [73.6, 2762.0], [73.7, 2763.0], [73.8, 2765.0], [73.9, 2765.0], [74.0, 2765.0], [74.1, 2767.0], [74.2, 2769.0], [74.3, 2769.0], [74.4, 2769.0], [74.5, 2769.0], [74.6, 2770.0], [74.7, 2771.0], [74.8, 2773.0], [74.9, 2773.0], [75.0, 2775.0], [75.1, 2776.0], [75.2, 2778.0], [75.3, 2779.0], [75.4, 2779.0], [75.5, 2779.0], [75.6, 2780.0], [75.7, 2782.0], [75.8, 2782.0], [75.9, 2786.0], [76.0, 2787.0], [76.1, 2788.0], [76.2, 2788.0], [76.3, 2790.0], [76.4, 2791.0], [76.5, 2791.0], [76.6, 2791.0], [76.7, 2792.0], [76.8, 2793.0], [76.9, 2797.0], [77.0, 2800.0], [77.1, 2800.0], [77.2, 2803.0], [77.3, 2804.0], [77.4, 2804.0], [77.5, 2804.0], [77.6, 2804.0], [77.7, 2808.0], [77.8, 2808.0], [77.9, 2808.0], [78.0, 2810.0], [78.1, 2811.0], [78.2, 2812.0], [78.3, 2812.0], [78.4, 2814.0], [78.5, 2815.0], [78.6, 2817.0], [78.7, 2817.0], [78.8, 2820.0], [78.9, 2822.0], [79.0, 2823.0], [79.1, 2823.0], [79.2, 2823.0], [79.3, 2824.0], [79.4, 2825.0], [79.5, 2825.0], [79.6, 2825.0], [79.7, 2827.0], [79.8, 2828.0], [79.9, 2828.0], [80.0, 2830.0], [80.1, 2831.0], [80.2, 2833.0], [80.3, 2833.0], [80.4, 2834.0], [80.5, 2834.0], [80.6, 2835.0], [80.7, 2836.0], [80.8, 2837.0], [80.9, 2837.0], [81.0, 2842.0], [81.1, 2843.0], [81.2, 2845.0], [81.3, 2846.0], [81.4, 2847.0], [81.5, 2848.0], [81.6, 2850.0], [81.7, 2851.0], [81.8, 2852.0], [81.9, 2852.0], [82.0, 2853.0], [82.1, 2854.0], [82.2, 2854.0], [82.3, 2856.0], [82.4, 2857.0], [82.5, 2859.0], [82.6, 2861.0], [82.7, 2861.0], [82.8, 2864.0], [82.9, 2867.0], [83.0, 2868.0], [83.1, 2876.0], [83.2, 2877.0], [83.3, 2879.0], [83.4, 2880.0], [83.5, 2883.0], [83.6, 2883.0], [83.7, 2883.0], [83.8, 2885.0], [83.9, 2888.0], [84.0, 2890.0], [84.1, 2891.0], [84.2, 2891.0], [84.3, 2897.0], [84.4, 2902.0], [84.5, 2903.0], [84.6, 2907.0], [84.7, 2913.0], [84.8, 2918.0], [84.9, 2921.0], [85.0, 2921.0], [85.1, 2921.0], [85.2, 2926.0], [85.3, 2937.0], [85.4, 2938.0], [85.5, 2942.0], [85.6, 2943.0], [85.7, 2945.0], [85.8, 2954.0], [85.9, 2956.0], [86.0, 2976.0], [86.1, 2988.0], [86.2, 2991.0], [86.3, 3004.0], [86.4, 3008.0], [86.5, 3009.0], [86.6, 3039.0], [86.7, 3043.0], [86.8, 3065.0], [86.9, 3087.0], [87.0, 3093.0], [87.1, 3099.0], [87.2, 3106.0], [87.3, 3124.0], [87.4, 3140.0], [87.5, 3144.0], [87.6, 3159.0], [87.7, 3165.0], [87.8, 3169.0], [87.9, 3173.0], [88.0, 3175.0], [88.1, 3176.0], [88.2, 3186.0], [88.3, 3188.0], [88.4, 3193.0], [88.5, 3195.0], [88.6, 3195.0], [88.7, 3200.0], [88.8, 3210.0], [88.9, 3217.0], [89.0, 3224.0], [89.1, 3225.0], [89.2, 3229.0], [89.3, 3230.0], [89.4, 3232.0], [89.5, 3235.0], [89.6, 3235.0], [89.7, 3236.0], [89.8, 3236.0], [89.9, 3238.0], [90.0, 3240.0], [90.1, 3240.0], [90.2, 3244.0], [90.3, 3249.0], [90.4, 3251.0], [90.5, 3253.0], [90.6, 3253.0], [90.7, 3257.0], [90.8, 3262.0], [90.9, 3264.0], [91.0, 3265.0], [91.1, 3269.0], [91.2, 3271.0], [91.3, 3272.0], [91.4, 3275.0], [91.5, 3279.0], [91.6, 3280.0], [91.7, 3280.0], [91.8, 3288.0], [91.9, 3289.0], [92.0, 3292.0], [92.1, 3293.0], [92.2, 3297.0], [92.3, 3297.0], [92.4, 3298.0], [92.5, 3298.0], [92.6, 3313.0], [92.7, 3313.0], [92.8, 3318.0], [92.9, 3322.0], [93.0, 3335.0], [93.1, 3335.0], [93.2, 3337.0], [93.3, 3341.0], [93.4, 3353.0], [93.5, 3353.0], [93.6, 3357.0], [93.7, 3361.0], [93.8, 3363.0], [93.9, 3364.0], [94.0, 3376.0], [94.1, 3378.0], [94.2, 3381.0], [94.3, 3382.0], [94.4, 3384.0], [94.5, 3389.0], [94.6, 3390.0], [94.7, 3408.0], [94.8, 3416.0], [94.9, 3417.0], [95.0, 3420.0], [95.1, 3438.0], [95.2, 3439.0], [95.3, 3443.0], [95.4, 3447.0], [95.5, 3450.0], [95.6, 3459.0], [95.7, 3464.0], [95.8, 3469.0], [95.9, 3473.0], [96.0, 3475.0], [96.1, 3478.0], [96.2, 3497.0], [96.3, 3508.0], [96.4, 3509.0], [96.5, 3514.0], [96.6, 3516.0], [96.7, 3527.0], [96.8, 3528.0], [96.9, 3539.0], [97.0, 3554.0], [97.1, 3561.0], [97.2, 3610.0], [97.3, 3650.0], [97.4, 3672.0], [97.5, 3690.0], [97.6, 3711.0], [97.7, 3722.0], [97.8, 3740.0], [97.9, 3748.0], [98.0, 3749.0], [98.1, 3763.0], [98.2, 3791.0], [98.3, 3822.0], [98.4, 3836.0], [98.5, 3836.0], [98.6, 3843.0], [98.7, 3876.0], [98.8, 3881.0], [98.9, 3885.0], [99.0, 4057.0], [99.1, 4097.0], [99.2, 4110.0], [99.3, 4123.0], [99.4, 4123.0], [99.5, 4135.0], [99.6, 4204.0], [99.7, 4213.0], [99.8, 4220.0], [99.9, 4567.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 94.0, "series": [{"data": [[0.0, 1.0], [600.0, 7.0], [700.0, 6.0], [800.0, 7.0], [900.0, 19.0], [1000.0, 6.0], [1100.0, 15.0], [1200.0, 4.0], [1300.0, 19.0], [1400.0, 13.0], [1500.0, 65.0], [1600.0, 38.0], [1700.0, 11.0], [1800.0, 31.0], [1900.0, 26.0], [2000.0, 56.0], [2100.0, 84.0], [2200.0, 71.0], [2300.0, 53.0], [2400.0, 33.0], [2500.0, 43.0], [2600.0, 51.0], [2700.0, 94.0], [2800.0, 75.0], [2900.0, 19.0], [3000.0, 9.0], [3100.0, 15.0], [200.0, 1.0], [3200.0, 39.0], [3300.0, 21.0], [3400.0, 16.0], [3500.0, 9.0], [3700.0, 7.0], [3600.0, 4.0], [3800.0, 7.0], [4000.0, 2.0], [4100.0, 4.0], [4200.0, 3.0], [4500.0, 1.0], [300.0, 5.0], [400.0, 1.0], [500.0, 9.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 8.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 887.0, "series": [{"data": [[0.0, 8.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 105.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 887.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 295.14511041009433, "minX": 1.6542948E12, "maxY": 360.69945355191254, "series": [{"data": [[1.6542948E12, 360.69945355191254], [1.65429486E12, 295.14511041009433]], "isOverall": false, "label": "Prueba de rendimiento", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65429486E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 373.5, "minX": 5.0, "maxY": 4135.0, "series": [{"data": [[5.0, 2729.8], [7.0, 2742.5], [10.0, 2708.0], [11.0, 2524.0], [12.0, 2548.0], [13.0, 2578.0], [14.0, 3039.0], [15.0, 2800.0], [16.0, 2938.0], [18.0, 3200.0], [19.0, 2904.5], [20.0, 2903.0], [21.0, 2540.0], [22.0, 3539.0], [23.0, 3195.0], [24.0, 3169.0], [26.0, 2939.5], [28.0, 2954.0], [31.0, 2978.5], [33.0, 2803.0], [32.0, 2754.5], [34.0, 3822.0], [37.0, 3004.0], [36.0, 2748.0], [38.0, 3564.0], [40.0, 2857.0], [42.0, 2769.0], [45.0, 2828.0], [44.0, 2819.5], [47.0, 3026.0], [49.0, 3140.0], [51.0, 2500.5], [53.0, 2730.0], [52.0, 2620.0], [55.0, 3390.0], [57.0, 2505.5], [56.0, 2481.0], [59.0, 2595.0], [58.0, 2463.0], [67.0, 2567.0], [66.0, 2951.3333333333335], [65.0, 3249.3333333333335], [64.0, 2584.0], [71.0, 3099.0], [70.0, 2576.5], [68.0, 2536.0], [74.0, 4135.0], [72.0, 3124.0], [79.0, 2700.0], [78.0, 2643.0], [77.0, 2694.0], [76.0, 2825.6666666666665], [80.0, 3232.0], [86.0, 3740.0], [85.0, 3249.0], [84.0, 3208.75], [90.0, 2720.0], [89.0, 2717.0], [88.0, 2968.0], [94.0, 2701.0], [93.0, 2793.0], [92.0, 2771.0], [98.0, 3217.0], [97.0, 2825.0], [96.0, 3024.0], [103.0, 2336.0], [102.0, 3006.75], [107.0, 2814.0], [106.0, 2769.0], [105.0, 2854.0], [104.0, 2435.0], [111.0, 3224.0], [110.0, 2754.0], [109.0, 2848.0], [108.0, 2823.0], [113.0, 3236.0], [112.0, 3186.0], [118.0, 3357.0], [117.0, 3313.0], [116.0, 3191.6666666666665], [123.0, 2283.0], [122.0, 2827.0], [121.0, 2831.0], [120.0, 2790.0], [126.0, 2256.0], [124.0, 2257.0], [135.0, 2337.0], [134.0, 2823.0], [133.0, 2330.0], [132.0, 2833.5], [130.0, 2264.0], [129.0, 2284.0], [128.0, 2589.0], [143.0, 2343.0], [142.0, 2355.0], [141.0, 2417.0], [140.0, 3633.5], [138.0, 2812.0], [137.0, 2345.0], [136.0, 3253.0], [144.0, 1076.0], [148.0, 1347.0], [150.0, 373.5], [151.0, 3747.0], [147.0, 2425.0], [146.0, 2391.0], [145.0, 2719.0], [152.0, 390.0], [159.0, 2850.0], [158.0, 3047.6666666666665], [155.0, 3275.0], [154.0, 3256.6666666666665], [167.0, 3536.5], [165.0, 3648.5], [163.0, 3363.0], [162.0, 2642.0], [160.0, 2833.0], [168.0, 1665.0], [173.0, 2195.5], [175.0, 3158.5], [172.0, 2861.0], [171.0, 2878.5], [170.0, 3447.0], [181.0, 1959.0], [183.0, 2362.0], [182.0, 2503.0], [179.0, 2815.5], [177.0, 3420.0], [176.0, 3408.0], [184.0, 1462.5], [190.0, 1514.0], [189.0, 1692.25], [188.0, 634.0], [187.0, 1836.5], [191.0, 2937.0], [186.0, 2403.0], [185.0, 2406.0], [199.0, 1524.5], [198.0, 2706.0], [197.0, 2399.0], [196.0, 2400.0], [195.0, 1809.0], [194.0, 3079.0], [192.0, 3353.0], [200.0, 1043.0], [202.0, 800.0], [204.0, 1502.0], [207.0, 2730.0], [206.0, 2293.0], [205.0, 2705.0], [203.0, 3131.6666666666665], [212.0, 3253.0], [211.0, 3091.6666666666665], [208.0, 2699.0], [223.0, 2300.0], [222.0, 2304.0], [220.0, 2290.0], [219.0, 2301.0], [218.0, 3251.0], [216.0, 3009.25], [225.0, 724.3333333333334], [224.0, 793.5], [228.0, 929.0], [231.0, 2197.3333333333335], [229.0, 2319.0], [227.0, 3280.0], [233.0, 933.0], [232.0, 2164.8], [239.0, 2302.0], [238.0, 1161.75], [237.0, 2112.0], [236.0, 2342.0], [235.0, 2936.3333333333335], [240.0, 1485.0], [241.0, 1911.5], [246.0, 729.0], [247.0, 2312.5], [245.0, 2976.0], [244.0, 1817.0], [243.0, 2842.0], [242.0, 2834.0], [249.0, 1877.0], [252.0, 1121.6666666666665], [251.0, 1290.7142857142858], [250.0, 1660.0], [253.0, 1857.0], [255.0, 2867.0], [254.0, 2856.0], [248.0, 2315.0], [269.0, 2876.0], [271.0, 3389.0], [265.0, 1261.0], [270.0, 2877.0], [268.0, 3672.0], [259.0, 3095.5], [257.0, 2921.0], [256.0, 2918.0], [267.0, 3100.6666666666665], [264.0, 2350.6666666666665], [261.0, 2885.0], [260.0, 2340.0], [287.0, 2311.0], [286.0, 2251.0], [282.0, 2281.0], [281.0, 4110.0], [280.0, 3295.0], [278.0, 2967.75], [274.0, 3145.6666666666665], [302.0, 3298.0], [293.0, 2253.0], [292.0, 2883.0], [301.0, 2750.3333333333335], [300.0, 508.0], [299.0, 2852.0], [298.0, 2309.0], [297.0, 2288.0], [296.0, 2281.0], [295.0, 2310.5], [291.0, 2649.3333333333335], [288.0, 2289.0], [318.0, 2861.0], [306.0, 1341.0], [315.0, 2392.0], [317.0, 3189.0], [307.0, 2779.0], [314.0, 2295.0], [313.0, 2317.0], [312.0, 3313.0], [310.0, 3193.0], [304.0, 3217.5], [309.0, 2837.0], [308.0, 2437.0], [334.0, 1507.6666666666665], [322.0, 2007.5], [321.0, 2851.0], [320.0, 2818.5], [323.0, 2779.0], [327.0, 2797.0], [326.0, 1797.0], [325.0, 2380.0], [324.0, 3257.0], [330.0, 1890.5], [335.0, 1724.0], [333.0, 1618.5], [332.0, 2735.0], [331.0, 3229.0], [329.0, 2262.0], [328.0, 2735.0], [349.0, 1784.0], [336.0, 1454.8333333333333], [343.0, 3198.6666666666665], [342.0, 2782.0], [337.0, 1391.8], [338.0, 1711.2], [351.0, 2288.0], [348.0, 3225.0], [339.0, 2811.0], [347.0, 2759.0], [346.0, 2316.0], [344.0, 2298.0], [355.0, 1757.3333333333333], [352.0, 1630.5], [356.0, 1569.0], [359.0, 2280.0], [358.0, 3093.5], [354.0, 2166.0], [353.0, 2309.0], [367.0, 2714.0], [361.0, 2911.5], [366.0, 2665.0], [365.0, 2737.0], [364.0, 3106.0], [363.0, 2679.0], [362.0, 3497.0], [381.0, 1875.0], [368.0, 2445.5], [375.0, 3528.0], [374.0, 2263.0], [373.0, 3514.0], [372.0, 2724.0], [369.0, 2339.0], [371.0, 2383.5], [370.0, 3473.0], [379.0, 1915.0], [380.0, 2337.6], [383.0, 1725.25], [382.0, 1738.25], [378.0, 3527.0], [377.0, 3443.0], [376.0, 2991.0], [386.0, 2109.6666666666665], [388.0, 2102.7000000000003], [387.0, 1873.4], [396.0, 2024.230769230769], [399.0, 2158.095238095238], [398.0, 2122.4999999999995], [397.0, 2143.7777777777783], [393.0, 2006.5], [392.0, 1907.5882352941178], [390.0, 2354.5], [391.0, 2719.0], [389.0, 2093.0], [385.0, 1989.5], [384.0, 2047.0], [395.0, 2045.5], [394.0, 2009.0454545454543], [401.0, 1828.4444444444443], [400.0, 2053.875], [411.0, 2290.25], [410.0, 1929.875], [407.0, 2212.0], [405.0, 1938.125], [406.0, 2522.0], [403.0, 1798.2], [408.0, 2681.0], [412.0, 2998.6666666666665], [413.0, 2988.0], [414.0, 2214.5], [415.0, 1656.0], [409.0, 2184.6249999999995], [404.0, 1618.5], [402.0, 2050.6], [419.0, 2308.0], [417.0, 2079.5], [416.0, 1911.25], [420.0, 2095.0], [421.0, 3335.0], [423.0, 2528.0], [422.0, 2593.0], [430.0, 1624.0], [429.0, 2075.0], [428.0, 2792.0], [426.0, 2138.0], [425.0, 2582.5], [444.0, 2521.5], [439.0, 2913.0], [433.0, 3381.0], [432.0, 2954.0], [435.0, 3341.0], [434.0, 2506.0], [438.0, 2573.0], [437.0, 2116.5], [436.0, 2511.0], [442.0, 2283.0], [441.0, 1626.0], [440.0, 2487.0], [443.0, 2106.25], [447.0, 2384.4], [446.0, 2333.0], [445.0, 2018.0], [449.0, 2222.9999999999995], [450.0, 2125.8333333333335], [448.0, 1769.111111111111], [453.0, 1918.6666666666667], [452.0, 1868.5], [455.0, 2066.090909090909], [454.0, 2227.375], [456.0, 1950.4], [457.0, 1988.0], [459.0, 2441.0], [458.0, 2737.0], [463.0, 2683.5], [462.0, 2596.3333333333335], [461.0, 2722.0], [460.0, 2788.0], [451.0, 1573.0], [466.0, 2632.2], [467.0, 2607.5], [477.0, 2369.0], [479.0, 2763.0], [478.0, 2738.0], [465.0, 2598.3636363636365], [468.0, 2196.0], [470.0, 2364.818181818182], [469.0, 2425.0], [472.0, 2003.4444444444443], [471.0, 2145.5], [464.0, 2089.0], [473.0, 2497.5], [475.0, 2334.0], [474.0, 2325.0], [487.0, 2446.5], [485.0, 2704.0], [484.0, 2445.0], [483.0, 2279.0], [482.0, 2333.0], [489.0, 2312.5], [488.0, 2791.0], [486.0, 2792.0], [481.0, 3289.0], [480.0, 3262.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[319.1379999999996, 2306.8410000000013]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 489.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 786.9, "minX": 1.6542948E12, "maxY": 5429.166666666667, "series": [{"data": [[1.6542948E12, 3136.8], [1.65429486E12, 5429.166666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6542948E12, 786.9], [1.65429486E12, 1363.1]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65429486E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1711.8169398907096, "minX": 1.6542948E12, "maxY": 2650.3406940063114, "series": [{"data": [[1.6542948E12, 1711.8169398907096], [1.65429486E12, 2650.3406940063114]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65429486E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1711.7131147540988, "minX": 1.6542948E12, "maxY": 2650.3075709779177, "series": [{"data": [[1.6542948E12, 1711.7131147540988], [1.65429486E12, 2650.3075709779177]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65429486E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 3.8895899053627745, "minX": 1.6542948E12, "maxY": 23.50546448087433, "series": [{"data": [[1.6542948E12, 23.50546448087433], [1.65429486E12, 3.8895899053627745]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65429486E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 94.0, "minX": 1.6542948E12, "maxY": 4567.0, "series": [{"data": [[1.6542948E12, 3240.0], [1.65429486E12, 4567.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6542948E12, 2421.6000000000004], [1.65429486E12, 3359.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6542948E12, 3107.899999999998], [1.65429486E12, 4123.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6542948E12, 2627.5], [1.65429486E12, 3530.75]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6542948E12, 94.0], [1.65429486E12, 1300.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6542948E12, 1681.0], [1.65429486E12, 2695.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65429486E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 515.0, "minX": 15.0, "maxY": 2806.0, "series": [{"data": [[141.0, 1815.0], [149.0, 2095.0], [151.0, 2182.0], [145.0, 2658.0], [162.0, 2806.0], [176.0, 2800.5], [15.0, 515.0], [61.0, 997.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 176.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 515.0, "minX": 15.0, "maxY": 2806.0, "series": [{"data": [[141.0, 1815.0], [149.0, 2095.0], [151.0, 2182.0], [145.0, 2658.0], [162.0, 2806.0], [176.0, 2800.5], [15.0, 515.0], [61.0, 997.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 176.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 3.15, "minX": 1.6542948E12, "maxY": 13.516666666666667, "series": [{"data": [[1.6542948E12, 13.516666666666667], [1.65429486E12, 3.15]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65429486E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 6.1, "minX": 1.6542948E12, "maxY": 10.566666666666666, "series": [{"data": [[1.6542948E12, 6.1], [1.65429486E12, 10.566666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65429486E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 6.1, "minX": 1.6542948E12, "maxY": 10.566666666666666, "series": [{"data": [[1.6542948E12, 6.1], [1.65429486E12, 10.566666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65429486E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 6.1, "minX": 1.6542948E12, "maxY": 10.566666666666666, "series": [{"data": [[1.6542948E12, 6.1], [1.65429486E12, 10.566666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65429486E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

