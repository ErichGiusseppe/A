/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 104.0, "minX": 0.0, "maxY": 5692.0, "series": [{"data": [[0.0, 104.0], [0.1, 172.0], [0.2, 173.0], [0.3, 173.0], [0.4, 186.0], [0.5, 186.0], [0.6, 186.0], [0.7, 199.0], [0.8, 241.0], [0.9, 243.0], [1.0, 257.0], [1.1, 264.0], [1.2, 264.0], [1.3, 292.0], [1.4, 293.0], [1.5, 294.0], [1.6, 418.0], [1.7, 447.0], [1.8, 458.0], [1.9, 512.0], [2.0, 547.0], [2.1, 557.0], [2.2, 562.0], [2.3, 582.0], [2.4, 590.0], [2.5, 590.0], [2.6, 606.0], [2.7, 626.0], [2.8, 627.0], [2.9, 631.0], [3.0, 632.0], [3.1, 659.0], [3.2, 721.0], [3.3, 727.0], [3.4, 729.0], [3.5, 767.0], [3.6, 770.0], [3.7, 784.0], [3.8, 786.0], [3.9, 789.0], [4.0, 799.0], [4.1, 847.0], [4.2, 894.0], [4.3, 913.0], [4.4, 915.0], [4.5, 919.0], [4.6, 981.0], [4.7, 1050.0], [4.8, 1116.0], [4.9, 1120.0], [5.0, 1244.0], [5.1, 1263.0], [5.2, 1308.0], [5.3, 1332.0], [5.4, 1351.0], [5.5, 1355.0], [5.6, 1371.0], [5.7, 1379.0], [5.8, 1380.0], [5.9, 1463.0], [6.0, 1475.0], [6.1, 1481.0], [6.2, 1493.0], [6.3, 1506.0], [6.4, 1529.0], [6.5, 1530.0], [6.6, 1539.0], [6.7, 1578.0], [6.8, 1589.0], [6.9, 1591.0], [7.0, 1602.0], [7.1, 1624.0], [7.2, 1624.0], [7.3, 1625.0], [7.4, 1642.0], [7.5, 1651.0], [7.6, 1664.0], [7.7, 1672.0], [7.8, 1678.0], [7.9, 1679.0], [8.0, 1687.0], [8.1, 1694.0], [8.2, 1733.0], [8.3, 1737.0], [8.4, 1776.0], [8.5, 1794.0], [8.6, 1805.0], [8.7, 1807.0], [8.8, 1813.0], [8.9, 1821.0], [9.0, 1821.0], [9.1, 1828.0], [9.2, 1839.0], [9.3, 1852.0], [9.4, 1852.0], [9.5, 1863.0], [9.6, 1874.0], [9.7, 1876.0], [9.8, 1894.0], [9.9, 1900.0], [10.0, 1902.0], [10.1, 1907.0], [10.2, 1912.0], [10.3, 1913.0], [10.4, 1920.0], [10.5, 1923.0], [10.6, 1941.0], [10.7, 1947.0], [10.8, 1948.0], [10.9, 1950.0], [11.0, 1954.0], [11.1, 1957.0], [11.2, 1958.0], [11.3, 1960.0], [11.4, 1966.0], [11.5, 1968.0], [11.6, 1971.0], [11.7, 1984.0], [11.8, 1990.0], [11.9, 2001.0], [12.0, 2008.0], [12.1, 2015.0], [12.2, 2016.0], [12.3, 2017.0], [12.4, 2023.0], [12.5, 2028.0], [12.6, 2032.0], [12.7, 2038.0], [12.8, 2039.0], [12.9, 2039.0], [13.0, 2042.0], [13.1, 2045.0], [13.2, 2048.0], [13.3, 2052.0], [13.4, 2056.0], [13.5, 2068.0], [13.6, 2088.0], [13.7, 2096.0], [13.8, 2098.0], [13.9, 2101.0], [14.0, 2103.0], [14.1, 2108.0], [14.2, 2115.0], [14.3, 2118.0], [14.4, 2119.0], [14.5, 2120.0], [14.6, 2120.0], [14.7, 2126.0], [14.8, 2127.0], [14.9, 2148.0], [15.0, 2149.0], [15.1, 2152.0], [15.2, 2155.0], [15.3, 2156.0], [15.4, 2157.0], [15.5, 2157.0], [15.6, 2165.0], [15.7, 2166.0], [15.8, 2177.0], [15.9, 2183.0], [16.0, 2195.0], [16.1, 2208.0], [16.2, 2211.0], [16.3, 2220.0], [16.4, 2223.0], [16.5, 2224.0], [16.6, 2224.0], [16.7, 2225.0], [16.8, 2225.0], [16.9, 2226.0], [17.0, 2228.0], [17.1, 2230.0], [17.2, 2232.0], [17.3, 2238.0], [17.4, 2241.0], [17.5, 2246.0], [17.6, 2249.0], [17.7, 2258.0], [17.8, 2265.0], [17.9, 2269.0], [18.0, 2275.0], [18.1, 2283.0], [18.2, 2283.0], [18.3, 2286.0], [18.4, 2290.0], [18.5, 2309.0], [18.6, 2311.0], [18.7, 2318.0], [18.8, 2319.0], [18.9, 2328.0], [19.0, 2329.0], [19.1, 2343.0], [19.2, 2348.0], [19.3, 2350.0], [19.4, 2353.0], [19.5, 2353.0], [19.6, 2365.0], [19.7, 2371.0], [19.8, 2378.0], [19.9, 2378.0], [20.0, 2383.0], [20.1, 2390.0], [20.2, 2403.0], [20.3, 2421.0], [20.4, 2423.0], [20.5, 2431.0], [20.6, 2432.0], [20.7, 2442.0], [20.8, 2443.0], [20.9, 2443.0], [21.0, 2472.0], [21.1, 2475.0], [21.2, 2475.0], [21.3, 2475.0], [21.4, 2476.0], [21.5, 2479.0], [21.6, 2480.0], [21.7, 2489.0], [21.8, 2490.0], [21.9, 2496.0], [22.0, 2497.0], [22.1, 2498.0], [22.2, 2498.0], [22.3, 2500.0], [22.4, 2501.0], [22.5, 2501.0], [22.6, 2503.0], [22.7, 2512.0], [22.8, 2523.0], [22.9, 2524.0], [23.0, 2525.0], [23.1, 2535.0], [23.2, 2545.0], [23.3, 2549.0], [23.4, 2572.0], [23.5, 2576.0], [23.6, 2586.0], [23.7, 2589.0], [23.8, 2591.0], [23.9, 2598.0], [24.0, 2610.0], [24.1, 2611.0], [24.2, 2611.0], [24.3, 2619.0], [24.4, 2619.0], [24.5, 2620.0], [24.6, 2624.0], [24.7, 2633.0], [24.8, 2640.0], [24.9, 2645.0], [25.0, 2653.0], [25.1, 2656.0], [25.2, 2667.0], [25.3, 2667.0], [25.4, 2668.0], [25.5, 2672.0], [25.6, 2674.0], [25.7, 2678.0], [25.8, 2680.0], [25.9, 2680.0], [26.0, 2681.0], [26.1, 2686.0], [26.2, 2687.0], [26.3, 2689.0], [26.4, 2702.0], [26.5, 2703.0], [26.6, 2706.0], [26.7, 2706.0], [26.8, 2716.0], [26.9, 2727.0], [27.0, 2738.0], [27.1, 2739.0], [27.2, 2740.0], [27.3, 2741.0], [27.4, 2745.0], [27.5, 2745.0], [27.6, 2750.0], [27.7, 2750.0], [27.8, 2753.0], [27.9, 2754.0], [28.0, 2755.0], [28.1, 2764.0], [28.2, 2766.0], [28.3, 2767.0], [28.4, 2769.0], [28.5, 2774.0], [28.6, 2778.0], [28.7, 2781.0], [28.8, 2782.0], [28.9, 2784.0], [29.0, 2793.0], [29.1, 2797.0], [29.2, 2803.0], [29.3, 2821.0], [29.4, 2823.0], [29.5, 2828.0], [29.6, 2853.0], [29.7, 2856.0], [29.8, 2861.0], [29.9, 2862.0], [30.0, 2870.0], [30.1, 2871.0], [30.2, 2876.0], [30.3, 2888.0], [30.4, 2892.0], [30.5, 2904.0], [30.6, 2905.0], [30.7, 2906.0], [30.8, 2906.0], [30.9, 2907.0], [31.0, 2908.0], [31.1, 2917.0], [31.2, 2918.0], [31.3, 2919.0], [31.4, 2920.0], [31.5, 2921.0], [31.6, 2925.0], [31.7, 2925.0], [31.8, 2928.0], [31.9, 2929.0], [32.0, 2931.0], [32.1, 2932.0], [32.2, 2935.0], [32.3, 2936.0], [32.4, 2936.0], [32.5, 2938.0], [32.6, 2943.0], [32.7, 2944.0], [32.8, 2947.0], [32.9, 2949.0], [33.0, 2952.0], [33.1, 2961.0], [33.2, 2962.0], [33.3, 2962.0], [33.4, 2963.0], [33.5, 2969.0], [33.6, 2973.0], [33.7, 2981.0], [33.8, 2982.0], [33.9, 2983.0], [34.0, 2984.0], [34.1, 2984.0], [34.2, 2984.0], [34.3, 2986.0], [34.4, 2995.0], [34.5, 2996.0], [34.6, 2997.0], [34.7, 2998.0], [34.8, 3001.0], [34.9, 3007.0], [35.0, 3012.0], [35.1, 3014.0], [35.2, 3020.0], [35.3, 3022.0], [35.4, 3028.0], [35.5, 3039.0], [35.6, 3042.0], [35.7, 3049.0], [35.8, 3051.0], [35.9, 3051.0], [36.0, 3059.0], [36.1, 3066.0], [36.2, 3070.0], [36.3, 3079.0], [36.4, 3093.0], [36.5, 3105.0], [36.6, 3108.0], [36.7, 3117.0], [36.8, 3123.0], [36.9, 3133.0], [37.0, 3138.0], [37.1, 3148.0], [37.2, 3149.0], [37.3, 3155.0], [37.4, 3161.0], [37.5, 3167.0], [37.6, 3178.0], [37.7, 3178.0], [37.8, 3186.0], [37.9, 3201.0], [38.0, 3214.0], [38.1, 3220.0], [38.2, 3221.0], [38.3, 3223.0], [38.4, 3227.0], [38.5, 3234.0], [38.6, 3235.0], [38.7, 3245.0], [38.8, 3253.0], [38.9, 3256.0], [39.0, 3261.0], [39.1, 3265.0], [39.2, 3267.0], [39.3, 3273.0], [39.4, 3274.0], [39.5, 3274.0], [39.6, 3276.0], [39.7, 3277.0], [39.8, 3278.0], [39.9, 3282.0], [40.0, 3282.0], [40.1, 3283.0], [40.2, 3284.0], [40.3, 3285.0], [40.4, 3286.0], [40.5, 3289.0], [40.6, 3300.0], [40.7, 3303.0], [40.8, 3305.0], [40.9, 3311.0], [41.0, 3312.0], [41.1, 3321.0], [41.2, 3322.0], [41.3, 3327.0], [41.4, 3327.0], [41.5, 3334.0], [41.6, 3336.0], [41.7, 3344.0], [41.8, 3344.0], [41.9, 3344.0], [42.0, 3345.0], [42.1, 3349.0], [42.2, 3351.0], [42.3, 3351.0], [42.4, 3355.0], [42.5, 3355.0], [42.6, 3367.0], [42.7, 3368.0], [42.8, 3368.0], [42.9, 3369.0], [43.0, 3370.0], [43.1, 3371.0], [43.2, 3371.0], [43.3, 3375.0], [43.4, 3380.0], [43.5, 3383.0], [43.6, 3390.0], [43.7, 3390.0], [43.8, 3396.0], [43.9, 3397.0], [44.0, 3399.0], [44.1, 3412.0], [44.2, 3416.0], [44.3, 3416.0], [44.4, 3435.0], [44.5, 3440.0], [44.6, 3443.0], [44.7, 3451.0], [44.8, 3453.0], [44.9, 3457.0], [45.0, 3459.0], [45.1, 3460.0], [45.2, 3462.0], [45.3, 3465.0], [45.4, 3466.0], [45.5, 3472.0], [45.6, 3473.0], [45.7, 3475.0], [45.8, 3476.0], [45.9, 3477.0], [46.0, 3477.0], [46.1, 3483.0], [46.2, 3485.0], [46.3, 3492.0], [46.4, 3498.0], [46.5, 3506.0], [46.6, 3506.0], [46.7, 3511.0], [46.8, 3514.0], [46.9, 3517.0], [47.0, 3533.0], [47.1, 3545.0], [47.2, 3553.0], [47.3, 3556.0], [47.4, 3563.0], [47.5, 3565.0], [47.6, 3569.0], [47.7, 3573.0], [47.8, 3573.0], [47.9, 3574.0], [48.0, 3579.0], [48.1, 3582.0], [48.2, 3583.0], [48.3, 3587.0], [48.4, 3587.0], [48.5, 3591.0], [48.6, 3595.0], [48.7, 3599.0], [48.8, 3600.0], [48.9, 3605.0], [49.0, 3607.0], [49.1, 3607.0], [49.2, 3613.0], [49.3, 3618.0], [49.4, 3625.0], [49.5, 3636.0], [49.6, 3636.0], [49.7, 3637.0], [49.8, 3639.0], [49.9, 3640.0], [50.0, 3641.0], [50.1, 3642.0], [50.2, 3650.0], [50.3, 3651.0], [50.4, 3651.0], [50.5, 3652.0], [50.6, 3654.0], [50.7, 3656.0], [50.8, 3657.0], [50.9, 3659.0], [51.0, 3659.0], [51.1, 3665.0], [51.2, 3666.0], [51.3, 3666.0], [51.4, 3671.0], [51.5, 3672.0], [51.6, 3672.0], [51.7, 3673.0], [51.8, 3673.0], [51.9, 3677.0], [52.0, 3680.0], [52.1, 3681.0], [52.2, 3685.0], [52.3, 3686.0], [52.4, 3687.0], [52.5, 3689.0], [52.6, 3690.0], [52.7, 3695.0], [52.8, 3696.0], [52.9, 3697.0], [53.0, 3698.0], [53.1, 3699.0], [53.2, 3700.0], [53.3, 3701.0], [53.4, 3701.0], [53.5, 3701.0], [53.6, 3702.0], [53.7, 3703.0], [53.8, 3705.0], [53.9, 3705.0], [54.0, 3706.0], [54.1, 3710.0], [54.2, 3711.0], [54.3, 3711.0], [54.4, 3714.0], [54.5, 3714.0], [54.6, 3715.0], [54.7, 3716.0], [54.8, 3717.0], [54.9, 3727.0], [55.0, 3728.0], [55.1, 3729.0], [55.2, 3730.0], [55.3, 3731.0], [55.4, 3731.0], [55.5, 3731.0], [55.6, 3732.0], [55.7, 3733.0], [55.8, 3735.0], [55.9, 3736.0], [56.0, 3738.0], [56.1, 3741.0], [56.2, 3750.0], [56.3, 3756.0], [56.4, 3762.0], [56.5, 3763.0], [56.6, 3767.0], [56.7, 3770.0], [56.8, 3782.0], [56.9, 3787.0], [57.0, 3787.0], [57.1, 3787.0], [57.2, 3798.0], [57.3, 3803.0], [57.4, 3807.0], [57.5, 3808.0], [57.6, 3811.0], [57.7, 3812.0], [57.8, 3815.0], [57.9, 3816.0], [58.0, 3818.0], [58.1, 3818.0], [58.2, 3819.0], [58.3, 3822.0], [58.4, 3829.0], [58.5, 3829.0], [58.6, 3831.0], [58.7, 3833.0], [58.8, 3833.0], [58.9, 3839.0], [59.0, 3846.0], [59.1, 3846.0], [59.2, 3852.0], [59.3, 3862.0], [59.4, 3867.0], [59.5, 3868.0], [59.6, 3869.0], [59.7, 3870.0], [59.8, 3872.0], [59.9, 3873.0], [60.0, 3893.0], [60.1, 3894.0], [60.2, 3895.0], [60.3, 3903.0], [60.4, 3905.0], [60.5, 3911.0], [60.6, 3913.0], [60.7, 3935.0], [60.8, 3949.0], [60.9, 3949.0], [61.0, 3950.0], [61.1, 3951.0], [61.2, 3954.0], [61.3, 3956.0], [61.4, 3957.0], [61.5, 3966.0], [61.6, 3966.0], [61.7, 3984.0], [61.8, 3999.0], [61.9, 4001.0], [62.0, 4002.0], [62.1, 4004.0], [62.2, 4005.0], [62.3, 4006.0], [62.4, 4006.0], [62.5, 4010.0], [62.6, 4022.0], [62.7, 4025.0], [62.8, 4026.0], [62.9, 4030.0], [63.0, 4034.0], [63.1, 4034.0], [63.2, 4043.0], [63.3, 4062.0], [63.4, 4070.0], [63.5, 4074.0], [63.6, 4076.0], [63.7, 4079.0], [63.8, 4082.0], [63.9, 4088.0], [64.0, 4092.0], [64.1, 4093.0], [64.2, 4100.0], [64.3, 4106.0], [64.4, 4111.0], [64.5, 4113.0], [64.6, 4118.0], [64.7, 4120.0], [64.8, 4126.0], [64.9, 4127.0], [65.0, 4127.0], [65.1, 4132.0], [65.2, 4136.0], [65.3, 4137.0], [65.4, 4138.0], [65.5, 4140.0], [65.6, 4143.0], [65.7, 4145.0], [65.8, 4145.0], [65.9, 4148.0], [66.0, 4149.0], [66.1, 4152.0], [66.2, 4156.0], [66.3, 4157.0], [66.4, 4164.0], [66.5, 4166.0], [66.6, 4166.0], [66.7, 4167.0], [66.8, 4167.0], [66.9, 4168.0], [67.0, 4169.0], [67.1, 4169.0], [67.2, 4175.0], [67.3, 4176.0], [67.4, 4177.0], [67.5, 4185.0], [67.6, 4191.0], [67.7, 4194.0], [67.8, 4204.0], [67.9, 4205.0], [68.0, 4209.0], [68.1, 4211.0], [68.2, 4212.0], [68.3, 4216.0], [68.4, 4221.0], [68.5, 4223.0], [68.6, 4233.0], [68.7, 4238.0], [68.8, 4248.0], [68.9, 4251.0], [69.0, 4253.0], [69.1, 4254.0], [69.2, 4256.0], [69.3, 4261.0], [69.4, 4264.0], [69.5, 4265.0], [69.6, 4266.0], [69.7, 4267.0], [69.8, 4267.0], [69.9, 4269.0], [70.0, 4278.0], [70.1, 4287.0], [70.2, 4294.0], [70.3, 4307.0], [70.4, 4309.0], [70.5, 4311.0], [70.6, 4313.0], [70.7, 4316.0], [70.8, 4317.0], [70.9, 4320.0], [71.0, 4326.0], [71.1, 4328.0], [71.2, 4328.0], [71.3, 4332.0], [71.4, 4332.0], [71.5, 4334.0], [71.6, 4336.0], [71.7, 4337.0], [71.8, 4337.0], [71.9, 4346.0], [72.0, 4349.0], [72.1, 4366.0], [72.2, 4372.0], [72.3, 4376.0], [72.4, 4381.0], [72.5, 4383.0], [72.6, 4384.0], [72.7, 4384.0], [72.8, 4385.0], [72.9, 4387.0], [73.0, 4389.0], [73.1, 4393.0], [73.2, 4395.0], [73.3, 4395.0], [73.4, 4396.0], [73.5, 4401.0], [73.6, 4404.0], [73.7, 4409.0], [73.8, 4409.0], [73.9, 4410.0], [74.0, 4420.0], [74.1, 4420.0], [74.2, 4422.0], [74.3, 4422.0], [74.4, 4426.0], [74.5, 4428.0], [74.6, 4429.0], [74.7, 4434.0], [74.8, 4442.0], [74.9, 4447.0], [75.0, 4449.0], [75.1, 4449.0], [75.2, 4453.0], [75.3, 4462.0], [75.4, 4462.0], [75.5, 4473.0], [75.6, 4487.0], [75.7, 4489.0], [75.8, 4491.0], [75.9, 4495.0], [76.0, 4502.0], [76.1, 4503.0], [76.2, 4504.0], [76.3, 4508.0], [76.4, 4511.0], [76.5, 4513.0], [76.6, 4514.0], [76.7, 4515.0], [76.8, 4516.0], [76.9, 4516.0], [77.0, 4519.0], [77.1, 4523.0], [77.2, 4525.0], [77.3, 4526.0], [77.4, 4527.0], [77.5, 4527.0], [77.6, 4528.0], [77.7, 4531.0], [77.8, 4532.0], [77.9, 4536.0], [78.0, 4537.0], [78.1, 4539.0], [78.2, 4540.0], [78.3, 4542.0], [78.4, 4549.0], [78.5, 4550.0], [78.6, 4562.0], [78.7, 4562.0], [78.8, 4563.0], [78.9, 4566.0], [79.0, 4571.0], [79.1, 4572.0], [79.2, 4573.0], [79.3, 4576.0], [79.4, 4576.0], [79.5, 4578.0], [79.6, 4581.0], [79.7, 4581.0], [79.8, 4582.0], [79.9, 4584.0], [80.0, 4586.0], [80.1, 4595.0], [80.2, 4595.0], [80.3, 4596.0], [80.4, 4596.0], [80.5, 4599.0], [80.6, 4602.0], [80.7, 4604.0], [80.8, 4605.0], [80.9, 4606.0], [81.0, 4606.0], [81.1, 4609.0], [81.2, 4613.0], [81.3, 4617.0], [81.4, 4618.0], [81.5, 4627.0], [81.6, 4628.0], [81.7, 4629.0], [81.8, 4629.0], [81.9, 4629.0], [82.0, 4632.0], [82.1, 4635.0], [82.2, 4636.0], [82.3, 4639.0], [82.4, 4641.0], [82.5, 4645.0], [82.6, 4648.0], [82.7, 4657.0], [82.8, 4660.0], [82.9, 4661.0], [83.0, 4665.0], [83.1, 4673.0], [83.2, 4677.0], [83.3, 4677.0], [83.4, 4678.0], [83.5, 4679.0], [83.6, 4680.0], [83.7, 4680.0], [83.8, 4680.0], [83.9, 4683.0], [84.0, 4684.0], [84.1, 4684.0], [84.2, 4685.0], [84.3, 4690.0], [84.4, 4690.0], [84.5, 4690.0], [84.6, 4693.0], [84.7, 4700.0], [84.8, 4701.0], [84.9, 4701.0], [85.0, 4705.0], [85.1, 4706.0], [85.2, 4711.0], [85.3, 4711.0], [85.4, 4712.0], [85.5, 4720.0], [85.6, 4731.0], [85.7, 4731.0], [85.8, 4732.0], [85.9, 4732.0], [86.0, 4752.0], [86.1, 4756.0], [86.2, 4758.0], [86.3, 4762.0], [86.4, 4764.0], [86.5, 4768.0], [86.6, 4768.0], [86.7, 4769.0], [86.8, 4770.0], [86.9, 4777.0], [87.0, 4783.0], [87.1, 4788.0], [87.2, 4789.0], [87.3, 4792.0], [87.4, 4801.0], [87.5, 4804.0], [87.6, 4807.0], [87.7, 4808.0], [87.8, 4814.0], [87.9, 4816.0], [88.0, 4816.0], [88.1, 4817.0], [88.2, 4818.0], [88.3, 4821.0], [88.4, 4828.0], [88.5, 4833.0], [88.6, 4836.0], [88.7, 4838.0], [88.8, 4838.0], [88.9, 4841.0], [89.0, 4848.0], [89.1, 4849.0], [89.2, 4850.0], [89.3, 4859.0], [89.4, 4859.0], [89.5, 4862.0], [89.6, 4863.0], [89.7, 4863.0], [89.8, 4865.0], [89.9, 4866.0], [90.0, 4868.0], [90.1, 4869.0], [90.2, 4870.0], [90.3, 4872.0], [90.4, 4876.0], [90.5, 4877.0], [90.6, 4877.0], [90.7, 4877.0], [90.8, 4878.0], [90.9, 4881.0], [91.0, 4882.0], [91.1, 4887.0], [91.2, 4888.0], [91.3, 4889.0], [91.4, 4891.0], [91.5, 4897.0], [91.6, 4899.0], [91.7, 4899.0], [91.8, 4903.0], [91.9, 4903.0], [92.0, 4909.0], [92.1, 4909.0], [92.2, 4913.0], [92.3, 4920.0], [92.4, 4922.0], [92.5, 4927.0], [92.6, 4935.0], [92.7, 4936.0], [92.8, 4936.0], [92.9, 4947.0], [93.0, 4951.0], [93.1, 4957.0], [93.2, 4957.0], [93.3, 4960.0], [93.4, 4963.0], [93.5, 4964.0], [93.6, 4964.0], [93.7, 4967.0], [93.8, 4969.0], [93.9, 4974.0], [94.0, 4974.0], [94.1, 4974.0], [94.2, 4974.0], [94.3, 4978.0], [94.4, 4980.0], [94.5, 4983.0], [94.6, 4983.0], [94.7, 4986.0], [94.8, 4987.0], [94.9, 4989.0], [95.0, 4997.0], [95.1, 4999.0], [95.2, 5001.0], [95.3, 5006.0], [95.4, 5014.0], [95.5, 5027.0], [95.6, 5089.0], [95.7, 5123.0], [95.8, 5143.0], [95.9, 5163.0], [96.0, 5169.0], [96.1, 5177.0], [96.2, 5178.0], [96.3, 5190.0], [96.4, 5192.0], [96.5, 5194.0], [96.6, 5195.0], [96.7, 5206.0], [96.8, 5208.0], [96.9, 5211.0], [97.0, 5211.0], [97.1, 5220.0], [97.2, 5222.0], [97.3, 5231.0], [97.4, 5233.0], [97.5, 5239.0], [97.6, 5250.0], [97.7, 5254.0], [97.8, 5260.0], [97.9, 5272.0], [98.0, 5283.0], [98.1, 5283.0], [98.2, 5288.0], [98.3, 5296.0], [98.4, 5298.0], [98.5, 5320.0], [98.6, 5321.0], [98.7, 5334.0], [98.8, 5334.0], [98.9, 5340.0], [99.0, 5346.0], [99.1, 5427.0], [99.2, 5454.0], [99.3, 5554.0], [99.4, 5578.0], [99.5, 5583.0], [99.6, 5620.0], [99.7, 5669.0], [99.8, 5671.0], [99.9, 5692.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 100.0, "maxY": 47.0, "series": [{"data": [[600.0, 6.0], [700.0, 9.0], [800.0, 2.0], [900.0, 4.0], [1000.0, 2.0], [1100.0, 2.0], [1200.0, 2.0], [1300.0, 7.0], [1400.0, 4.0], [1500.0, 7.0], [1600.0, 12.0], [1700.0, 4.0], [1800.0, 13.0], [1900.0, 20.0], [2000.0, 20.0], [2100.0, 22.0], [2200.0, 24.0], [2300.0, 16.0], [2400.0, 21.0], [2500.0, 17.0], [2600.0, 24.0], [2700.0, 28.0], [2800.0, 13.0], [2900.0, 43.0], [3000.0, 17.0], [3100.0, 14.0], [3300.0, 35.0], [3200.0, 27.0], [3400.0, 24.0], [3500.0, 23.0], [3700.0, 41.0], [3600.0, 44.0], [3800.0, 30.0], [3900.0, 16.0], [4000.0, 23.0], [4100.0, 36.0], [4200.0, 25.0], [4300.0, 32.0], [4400.0, 25.0], [4500.0, 47.0], [4600.0, 41.0], [4700.0, 27.0], [4800.0, 44.0], [4900.0, 34.0], [5100.0, 10.0], [5000.0, 5.0], [5200.0, 18.0], [5300.0, 6.0], [5500.0, 3.0], [5600.0, 4.0], [5400.0, 2.0], [100.0, 7.0], [200.0, 8.0], [400.0, 3.0], [500.0, 7.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 5600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 18.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 937.0, "series": [{"data": [[0.0, 18.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 45.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 937.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 293.91638225256014, "minX": 1.65429504E12, "maxY": 562.6183574879234, "series": [{"data": [[1.65429504E12, 562.6183574879234], [1.6542951E12, 293.91638225256014]], "isOverall": false, "label": "Prueba de rendimiento", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6542951E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 179.0, "minX": 1.0, "maxY": 5692.0, "series": [{"data": [[2.0, 4731.0], [3.0, 4964.0], [4.0, 5089.0], [5.0, 4770.0], [8.0, 5085.0], [11.0, 4571.666666666667], [13.0, 4769.0], [15.0, 4716.0], [19.0, 4746.5], [20.0, 4983.0], [22.0, 4876.0], [23.0, 4692.0], [26.0, 4690.0], [29.0, 5030.75], [31.0, 4804.0], [32.0, 5043.333333333333], [35.0, 4955.5], [37.0, 4672.0], [39.0, 5043.333333333333], [41.0, 5177.0], [40.0, 4462.0], [43.0, 4833.0], [45.0, 4963.0], [46.0, 4799.0], [49.0, 4582.0], [48.0, 5055.0], [51.0, 4573.0], [50.0, 4997.0], [52.0, 4595.0], [55.0, 5190.0], [54.0, 4732.5], [57.0, 4553.5], [59.0, 4578.0], [58.0, 4550.0], [61.0, 4574.0], [63.0, 4581.0], [62.0, 4576.0], [67.0, 4784.666666666667], [64.0, 4920.0], [71.0, 4640.25], [74.0, 4899.0], [72.0, 4639.0], [79.0, 4831.0], [76.0, 4851.5], [83.0, 5554.0], [82.0, 4627.0], [81.0, 4877.0], [80.0, 4768.0], [86.0, 4897.0], [85.0, 4754.0], [91.0, 4661.0], [90.0, 4731.0], [89.0, 4853.666666666667], [95.0, 4690.0], [94.0, 4720.0], [93.0, 4606.0], [92.0, 4684.0], [98.0, 4982.0], [96.0, 5334.0], [102.0, 4964.0], [101.0, 4604.0], [100.0, 4982.0], [107.0, 4309.0], [106.0, 5322.5], [105.0, 4937.0], [111.0, 5028.0], [108.0, 4974.0], [115.0, 4678.0], [114.0, 5283.0], [113.0, 4967.0], [112.0, 4677.0], [118.0, 4385.0], [117.0, 4679.0], [123.0, 4685.0], [122.0, 5692.0], [121.0, 5334.0], [120.0, 4721.5], [127.0, 1565.3333333333333], [126.0, 4684.0], [125.0, 5320.0], [124.0, 4987.0], [130.0, 179.0], [135.0, 241.0], [132.0, 1572.0], [134.0, 4690.0], [133.0, 4404.0], [131.0, 4874.333333333333], [128.0, 4401.0], [139.0, 3306.3333333333335], [143.0, 2723.0], [141.0, 199.0], [142.0, 2932.0], [138.0, 5669.0], [136.0, 5121.5], [144.0, 293.0], [146.0, 2540.5], [151.0, 4384.0], [150.0, 4650.0], [148.0, 5222.0], [147.0, 4307.0], [145.0, 4868.0], [156.0, 418.0], [159.0, 4872.0], [158.0, 4605.0], [155.0, 4801.0], [153.0, 4925.5], [167.0, 4764.0], [165.0, 4549.0], [164.0, 4332.0], [163.0, 4334.0], [162.0, 5250.0], [161.0, 4609.0], [160.0, 4439.0], [175.0, 4294.5], [173.0, 4850.0], [172.0, 4540.0], [171.0, 4903.0], [170.0, 4895.0], [168.0, 4537.0], [183.0, 4489.0], [182.0, 5225.5], [180.0, 5220.0], [179.0, 5079.5], [177.0, 4508.0], [176.0, 4516.0], [190.0, 4566.0], [189.0, 4789.0], [188.0, 4816.0], [187.0, 4502.0], [186.0, 4216.0], [185.0, 5026.5], [192.0, 3189.0], [197.0, 4142.5], [195.0, 5088.0], [193.0, 4491.0], [206.0, 5206.0], [205.0, 4699.5], [203.0, 4690.5], [214.0, 2895.0], [215.0, 4863.0], [212.0, 5051.5], [211.0, 4870.0], [209.0, 4816.0], [208.0, 5058.0], [223.0, 458.0], [222.0, 4878.0], [221.0, 4269.0], [220.0, 4516.0], [219.0, 4866.0], [218.0, 5194.0], [217.0, 4384.0], [216.0, 4595.0], [231.0, 4428.0], [230.0, 4635.0], [228.0, 4442.0], [227.0, 4127.0], [226.0, 4387.5], [224.0, 4701.0], [234.0, 2884.0], [239.0, 725.0], [238.0, 4422.0], [237.0, 4420.0], [236.0, 4656.0], [233.0, 4792.0], [232.0, 4768.0], [247.0, 1656.75], [245.0, 4777.0], [244.0, 4312.0], [242.0, 4145.0], [241.0, 4599.333333333333], [248.0, 3286.6666666666665], [253.0, 2100.0], [255.0, 2235.6], [254.0, 770.0], [252.0, 4409.0], [251.0, 4265.0], [249.0, 4532.0], [270.0, 2213.666666666667], [256.0, 2527.0], [260.0, 2620.0], [263.0, 4617.0], [262.0, 4478.5], [269.0, 2446.5], [271.0, 851.6666666666666], [268.0, 4831.5], [259.0, 4294.0], [258.0, 3999.0], [257.0, 4673.0], [266.0, 4256.0], [265.0, 3966.0], [264.0, 4233.0], [286.0, 3829.0], [275.0, 2690.0], [274.0, 4527.0], [273.0, 4478.0], [284.0, 569.5], [285.0, 4187.0], [283.0, 4223.0], [282.0, 3951.0], [281.0, 4267.0], [280.0, 4328.0], [279.0, 4306.5], [277.0, 4238.0], [276.0, 4248.0], [302.0, 4034.0], [295.0, 3273.0], [291.0, 4585.0], [289.0, 4166.666666666667], [293.0, 4194.0], [292.0, 3819.0], [303.0, 4752.0], [301.0, 3732.0], [300.0, 4137.0], [299.0, 4204.0], [298.0, 3833.0], [297.0, 4221.0], [296.0, 4212.0], [319.0, 3666.0], [306.0, 2530.0], [304.0, 3121.0], [305.0, 4070.0], [310.0, 3665.0], [309.0, 4836.0], [308.0, 4499.5], [314.0, 919.0], [316.0, 2400.5], [318.0, 4376.0], [317.0, 4111.0], [315.0, 4072.0], [313.0, 3705.0], [312.0, 4059.5], [323.0, 4010.0], [334.0, 4435.0], [335.0, 4328.0], [332.0, 3640.0], [329.0, 4420.0], [328.0, 4428.0], [326.0, 4313.0], [325.0, 4346.0], [324.0, 4022.0], [322.0, 4034.0], [321.0, 4495.0], [320.0, 4889.0], [350.0, 3950.0], [351.0, 3949.0], [349.0, 4113.5], [339.0, 4026.0], [338.0, 4025.0], [336.0, 3613.0], [347.0, 4317.0], [346.0, 4266.0], [345.0, 3656.0], [344.0, 4004.0], [343.0, 3636.0], [342.0, 4381.0], [341.0, 3992.0], [366.0, 4025.0], [367.0, 3553.0], [365.0, 3625.0], [364.0, 3966.0], [363.0, 4395.0], [362.0, 4337.0], [361.0, 4369.0], [359.0, 4001.0], [354.0, 3591.0], [353.0, 4133.5], [358.0, 4002.0], [357.0, 4769.0], [356.0, 3983.0], [371.0, 2415.0], [370.0, 2622.0], [369.0, 3738.0], [368.0, 4320.0], [380.0, 3678.5], [378.0, 3829.0], [377.0, 4090.5], [375.0, 4641.0], [374.0, 3816.0], [373.0, 3905.0], [372.0, 3956.0], [392.0, 3357.6666666666665], [397.0, 3787.0], [395.0, 3459.0], [394.0, 3869.0], [393.0, 3460.0], [389.0, 4254.0], [388.0, 3868.5], [386.0, 4383.0], [385.0, 3569.0], [384.0, 3754.75], [414.0, 4525.0], [401.0, 2519.5], [404.0, 1481.0], [407.0, 3813.3333333333335], [400.0, 3600.6666666666665], [405.0, 3390.0], [415.0, 4145.0], [413.0, 3831.0], [412.0, 4211.0], [403.0, 3454.0], [411.0, 3717.0], [410.0, 3770.0], [409.0, 3465.0], [408.0, 4265.0], [428.0, 4177.0], [419.0, 2455.0], [418.0, 4152.0], [417.0, 3344.0], [416.0, 3355.0], [429.0, 3651.0], [427.0, 3321.0], [426.0, 3922.5], [424.0, 4167.0], [423.0, 3715.0], [422.0, 4168.0], [421.0, 4166.0], [420.0, 3368.0], [435.0, 3334.0], [445.0, 3672.0], [447.0, 4063.0], [444.0, 4074.0], [443.0, 3691.0], [440.0, 3756.0], [439.0, 3721.0], [437.0, 3355.0], [436.0, 4504.0], [434.0, 3440.5], [432.0, 4111.333333333333], [449.0, 3014.0], [463.0, 3055.5], [462.0, 3675.6666666666665], [459.0, 3917.5], [457.0, 3610.75], [454.0, 4120.0], [451.0, 3884.0], [478.0, 3289.0], [465.0, 1263.0], [466.0, 3576.0], [470.0, 3733.0], [468.0, 3494.0], [473.0, 1624.0], [475.0, 2696.0], [477.0, 2630.0], [476.0, 2310.0], [479.0, 3698.0], [474.0, 4325.0], [472.0, 4087.0], [493.0, 1737.125], [488.0, 2867.5], [484.0, 2391.0], [486.0, 3508.0], [489.0, 3215.0], [494.0, 2891.5], [491.0, 2011.3333333333335], [492.0, 2180.8], [483.0, 3303.0], [482.0, 3700.0], [481.0, 3559.0], [490.0, 3305.0], [487.0, 3705.0], [511.0, 3921.0], [508.0, 3913.0], [499.0, 3710.0], [498.0, 3690.5], [496.0, 3715.0], [507.0, 3607.0], [506.0, 3582.0], [505.0, 3607.0], [504.0, 3235.0], [503.0, 3278.0], [502.0, 3689.0], [501.0, 3265.0], [500.0, 4092.0], [518.0, 2778.0], [539.0, 2274.5000000000005], [525.0, 2013.25], [522.0, 3030.0], [521.0, 3574.0], [520.0, 3954.0], [526.0, 2402.0], [527.0, 3872.0], [519.0, 3605.0], [517.0, 3583.0], [516.0, 3194.6666666666665], [513.0, 3138.0], [512.0, 3273.0], [538.0, 2647.0], [537.0, 3123.0], [536.0, 2649.5], [524.0, 2089.6], [523.0, 2689.3333333333335], [533.0, 2223.8], [534.0, 2178.5], [535.0, 3846.0], [541.0, 2058.6666666666665], [540.0, 2733.5], [530.0, 2986.25], [543.0, 3511.0], [528.0, 3105.0], [542.0, 2700.0], [531.0, 2308.25], [532.0, 2662.0], [568.0, 2388.2], [547.0, 2708.5], [548.0, 2474.0], [549.0, 3020.0], [546.0, 2528.0], [545.0, 3466.0], [544.0, 2997.0], [550.0, 2329.0], [551.0, 3125.0], [575.0, 2539.25], [574.0, 2816.5], [573.0, 3379.0], [572.0, 3371.0], [571.0, 3383.0], [569.0, 3380.0], [559.0, 2772.2], [560.0, 2213.6666666666665], [565.0, 2205.0], [567.0, 2503.5714285714284], [566.0, 3168.5], [564.0, 2687.5], [563.0, 2643.6666666666665], [562.0, 3228.5], [558.0, 2032.0], [557.0, 3787.0], [556.0, 3485.0], [555.0, 3642.0], [553.0, 2610.0], [552.0, 3451.0], [581.0, 2754.5], [577.0, 2761.3333333333335], [576.0, 2689.0], [580.0, 2513.4285714285716], [579.0, 2929.0], [578.0, 2523.0], [585.0, 1968.0], [584.0, 3149.0], [588.0, 3533.5], [586.0, 2964.0], [590.0, 3681.0], [589.0, 2918.0], [592.0, 2641.5], [601.0, 2867.0], [603.0, 2241.0], [602.0, 3112.5], [604.0, 3148.0], [607.0, 2684.6], [606.0, 3527.0], [605.0, 2583.6666666666665], [600.0, 2821.0], [582.0, 3375.0], [594.0, 2475.0], [593.0, 2907.0], [591.0, 2739.0], [596.0, 2345.5], [597.0, 2957.0], [599.0, 2884.6666666666665], [595.0, 2744.166666666667], [615.0, 2906.0], [636.0, 2619.0], [627.0, 2575.0], [628.0, 3309.5], [629.0, 3274.0], [626.0, 2725.0], [625.0, 2904.0], [624.0, 3097.0], [623.0, 2088.0], [622.0, 3287.0], [620.0, 2931.0], [619.0, 3852.0], [618.0, 3803.0], [617.0, 4449.0], [616.0, 3636.0], [632.0, 3639.0], [613.0, 3223.0], [612.0, 3284.0], [611.0, 3245.0], [610.0, 3641.0], [609.0, 2932.0], [608.0, 3642.0], [630.0, 2535.0], [631.0, 3261.0], [637.0, 2992.0], [639.0, 3224.0], [634.0, 2888.0], [633.0, 3220.0], [646.0, 3106.6666666666665], [641.0, 2582.1666666666665], [640.0, 3094.0], [655.0, 3729.0], [654.0, 4267.0], [653.0, 3741.0], [643.0, 2737.3333333333335], [644.0, 2560.5], [645.0, 2819.6666666666665], [647.0, 2716.0], [664.0, 2549.3333333333335], [670.0, 2801.0], [671.0, 2667.0], [663.0, 2803.0], [662.0, 2769.0], [661.0, 2782.0], [660.0, 3459.5], [658.0, 4185.0], [657.0, 3672.0], [656.0, 2906.0], [669.0, 2715.0], [668.0, 3029.0], [667.0, 2309.0], [666.0, 4100.0], [665.0, 3416.0], [642.0, 2589.6666666666665], [652.0, 3286.3333333333335], [651.0, 2961.0], [650.0, 2793.2], [649.0, 2364.3333333333335], [648.0, 3186.0], [697.0, 3315.6666666666665], [672.0, 2814.1666666666665], [687.0, 2488.5], [686.0, 2640.0], [685.0, 2656.0], [684.0, 3278.5], [682.0, 3149.0], [701.0, 3078.6666666666665], [700.0, 2615.0], [699.0, 2867.2000000000007], [696.0, 2696.0], [679.0, 2859.5], [677.0, 2983.0], [676.0, 3312.0], [674.0, 2998.0], [673.0, 2963.0], [698.0, 2560.0], [703.0, 3201.0], [688.0, 3012.0], [690.0, 2611.0], [689.0, 2591.0], [692.0, 2984.0], [691.0, 2925.0], [694.0, 2876.0], [693.0, 2973.0], [702.0, 3396.0], [707.0, 2577.0], [706.0, 2858.5], [710.0, 2644.285714285714], [709.0, 2514.5], [711.0, 2810.3333333333335], [712.0, 2962.0], [708.0, 2497.0], [705.0, 2498.0], [704.0, 3167.0], [1.0, 4705.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[405.1580000000001, 3451.6460000000025]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 712.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 890.1, "minX": 1.65429504E12, "maxY": 5026.833333333333, "series": [{"data": [[1.65429504E12, 3558.5], [1.6542951E12, 5026.833333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65429504E12, 890.1], [1.6542951E12, 1259.9]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6542951E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2339.8719806763297, "minX": 1.65429504E12, "maxY": 4237.097269624572, "series": [{"data": [[1.65429504E12, 2339.8719806763297], [1.6542951E12, 4237.097269624572]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6542951E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2339.5217391304354, "minX": 1.65429504E12, "maxY": 4237.083617747441, "series": [{"data": [[1.65429504E12, 2339.5217391304354], [1.6542951E12, 4237.083617747441]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6542951E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 4.856655290102385, "minX": 1.65429504E12, "maxY": 44.057971014492765, "series": [{"data": [[1.65429504E12, 44.057971014492765], [1.6542951E12, 4.856655290102385]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6542951E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 104.0, "minX": 1.65429504E12, "maxY": 5692.0, "series": [{"data": [[1.65429504E12, 4449.0], [1.6542951E12, 5692.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65429504E12, 3393.0], [1.6542951E12, 4974.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65429504E12, 4176.300000000001], [1.6542951E12, 5578.65]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65429504E12, 3674.25], [1.6542951E12, 5216.849999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65429504E12, 104.0], [1.6542951E12, 2523.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65429504E12, 2442.5], [1.6542951E12, 4314.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6542951E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 243.0, "minX": 19.0, "maxY": 4760.0, "series": [{"data": [[132.0, 3158.0], [134.0, 3949.5], [35.0, 784.0], [150.0, 3596.0], [19.0, 243.0], [176.0, 4760.0], [113.0, 1966.0], [115.0, 2498.0], [126.0, 4514.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 176.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 243.0, "minX": 19.0, "maxY": 4760.0, "series": [{"data": [[132.0, 3158.0], [134.0, 3949.5], [35.0, 784.0], [150.0, 3596.0], [19.0, 243.0], [176.0, 4760.0], [113.0, 1966.0], [115.0, 2498.0], [126.0, 4514.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 176.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.65429504E12, "maxY": 16.666666666666668, "series": [{"data": [[1.65429504E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65429504E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 6.9, "minX": 1.65429504E12, "maxY": 9.766666666666667, "series": [{"data": [[1.65429504E12, 6.9], [1.6542951E12, 9.766666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6542951E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 6.9, "minX": 1.65429504E12, "maxY": 9.766666666666667, "series": [{"data": [[1.65429504E12, 6.9], [1.6542951E12, 9.766666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6542951E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 6.9, "minX": 1.65429504E12, "maxY": 9.766666666666667, "series": [{"data": [[1.65429504E12, 6.9], [1.6542951E12, 9.766666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6542951E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

